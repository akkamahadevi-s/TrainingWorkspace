package com.training.aop.banking;

import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;

@Aspect
public class LoogingAspect {
	
	//this will scan any package (configured)
	//this will scan any class
	
	//to specify the method exactly but this will find in any package
	/*@Before("execution(public double getBalance())")
	public void loggingAdviceBefore() {
		System.out.println("*********Logging Before Called**************");
		
	}*/
	
	//used qualifying name
	/*@Before("execution(public double com.training.aop.model.CAAccount.showBalance())")
	public void loggingAdviceBefore() {
		System.out.println("*********Logging Before Called**************");
		
	}*/
	
	//regular expression to log all getters
	//public getters shall be logged
	/*@Before("execution(public * get*())")
	public void loggingAdviceBefore() {
		System.out.println("*********Logging Before Called**************");
		
	}*/
	
	//log all getters
	/*@Before("execution(* get*())")
	public void loggingAdviceBefore() {
		System.out.println("*********Logging Before Called**************");
		
	}*/
	//get one parameter method
		/*@Before("execution(* get*(*))")
		public void loggingAdviceBefore() {
			System.out.println("*********Logging Before Called**************");
			
		}*/
	
	//any return type in any class of package com.training.aop.model
		@Before("execution(* com.training.aop.model.*.getBalance())")
		public void loggingAdviceBefore() {
			System.out.println("*********Logging Before Called**************");
			
		}
		
		@Before("allGetters()")
		public void secondAdvise()
		{
			System.out.println("Second aspect for all getters....");
		}
		
		@Before("allGettersSBAccount()")
		public void secondAdviseForABAccount()
		{
			System.out.println("Second aspect for all getters....");
		}
		
		@Before("allGetters || allGettersSBAccount()")
		public void compoundAdvice()
		{
			System.out.println("Second aspect for all getters....");
		}
		
		
		//if you hv too many advises then so its difficult to maintain so 
		//willl have one dummy method annotated with regex and we can use method instead of annotation
	
		@Pointcut("execution(* get*())")
		public void allGetters() {
			System.out.println("*********Logging Before Called**************");
		}
		
		@Pointcut("execution(* com.training.aop.model.SBAccount.getAcc())")
		public void allGettersSBAccount() {
			System.out.println("*********Logging Before Called**************");
		}
}
